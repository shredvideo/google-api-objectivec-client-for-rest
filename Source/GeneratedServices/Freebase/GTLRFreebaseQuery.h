// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Freebase Search (freebase/v1)
// Description:
//   Find Freebase entities using textual queries and other constraints.
// Documentation:
//   https://developers.google.com/freebase/

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRQuery.h"
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the query classes' properties below.

// ----------------------------------------------------------------------------
// encode

/**
 *  Encode certain characters in the response (such as tags and ambersands)
 *  using html encoding.
 *
 *  Value: "html"
 */
GTLR_EXTERN NSString * const kGTLRFreebaseEncodeHtml;
/**
 *  No encoding of the response. You should not print the results directly on an
 *  web page without html-escaping the content first.
 *
 *  Value: "off"
 */
GTLR_EXTERN NSString * const kGTLRFreebaseEncodeOff;

// ----------------------------------------------------------------------------
// format

/**
 *  Compact format useful for autocomplete/suggest UIs.
 *
 *  Value: "ac"
 */
GTLR_EXTERN NSString * const kGTLRFreebaseFormatAc;
/**
 *  [DEPRECATED] Same format as was returned by api.freebase.com.
 *
 *  Value: "classic"
 */
GTLR_EXTERN NSString * const kGTLRFreebaseFormatClassic;
/**
 *  Basic information about the entities.
 *
 *  Value: "entity"
 */
GTLR_EXTERN NSString * const kGTLRFreebaseFormatEntity;
/**
 *  [DEPRECATED] Ordered list of a freebase guids.
 *
 *  Value: "guids"
 */
GTLR_EXTERN NSString * const kGTLRFreebaseFormatGuids;
/**
 *  Ordered list of freebase ids.
 *
 *  Value: "ids"
 */
GTLR_EXTERN NSString * const kGTLRFreebaseFormatIds;
/**
 *  Ordered list of freebase mids.
 *
 *  Value: "mids"
 */
GTLR_EXTERN NSString * const kGTLRFreebaseFormatMids;

// ----------------------------------------------------------------------------
// help

/**
 *  The language codes served by the service.
 *
 *  Value: "langs"
 */
GTLR_EXTERN NSString * const kGTLRFreebaseHelpLangs;
/**
 *  The property/path mappings supported by the filter and output request
 *  parameters.
 *
 *  Value: "mappings"
 */
GTLR_EXTERN NSString * const kGTLRFreebaseHelpMappings;
/**
 *  The predicates and path-terminating properties supported by the filter and
 *  output request parameters.
 *
 *  Value: "predicates"
 */
GTLR_EXTERN NSString * const kGTLRFreebaseHelpPredicates;

// ----------------------------------------------------------------------------
// scoring

/**
 *  Use freebase and popularity entity ranking.
 *
 *  Value: "entity"
 */
GTLR_EXTERN NSString * const kGTLRFreebaseScoringEntity;
/**
 *  Use freebase entity ranking.
 *
 *  Value: "freebase"
 */
GTLR_EXTERN NSString * const kGTLRFreebaseScoringFreebase;
/**
 *  Use schema ranking for properties and types.
 *
 *  Value: "schema"
 */
GTLR_EXTERN NSString * const kGTLRFreebaseScoringSchema;

// ----------------------------------------------------------------------------
// spell

/**
 *  Request spelling suggestions for any query at least three characters long.
 *
 *  Value: "always"
 */
GTLR_EXTERN NSString * const kGTLRFreebaseSpellAlways;
/**
 *  Request spelling suggestions if no results were found.
 *
 *  Value: "no_results"
 */
GTLR_EXTERN NSString * const kGTLRFreebaseSpellNoResults;
/**
 *  Don't request spelling suggestions.
 *
 *  Value: "no_spelling"
 */
GTLR_EXTERN NSString * const kGTLRFreebaseSpellNoSpelling;

// ----------------------------------------------------------------------------
// Query Classes
//

/**
 *  Parent class for other Freebase query classes.
 */
@interface GTLRFreebaseQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Reconcile entities to Freebase open data.
 *
 *  Method: freebase.reconcile
 */
@interface GTLRFreebaseQuery_Reconcile : GTLRFreebaseQuery
// Previous library name was
//   +[GTLQueryFreebase queryForReconcile]

/**
 *  Required confidence for a candidate to match. Must be between .5 and 1.0
 *
 *  @note If not set, the documented server-side default will be 0.99 (from the
 *        range 0.0..1.0).
 */
@property(nonatomic, assign) float confidence;

/** Classifications of entity e.g. type, category, title. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *kind;

/**
 *  Languages for names and values. First language is used for display. Default
 *  is 'en'.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *lang;

/**
 *  Maximum number of candidates to return.
 *
 *  @note If not set, the documented server-side default will be 3 (from the
 *        range 0..25).
 */
@property(nonatomic, assign) NSInteger limit;

/** Name of entity. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Property values for entity formatted as
 *  :
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *prop;

/**
 *  Fetches a @c GTLRFreebase_ReconcileGet.
 *
 *  Reconcile entities to Freebase open data.
 *
 *  @returns GTLRFreebaseQuery_Reconcile
 */
+ (instancetype)query;

@end

/**
 *  Search Freebase open data.
 *
 *  Method: freebase.search
 */
@interface GTLRFreebaseQuery_Search : GTLRFreebaseQuery
// Previous library name was
//   +[GTLQueryFreebase queryForSearch]

/** A mql as_of_time value to use with mql_output queries. */
@property(nonatomic, copy, nullable) NSString *asOfTime;

/** JS method name for JSONP callbacks. */
@property(nonatomic, copy, nullable) NSString *callback;

/** The cursor value to use for the next page of results. */
@property(nonatomic, assign) NSInteger cursor;

/** Restrict to topics with this Freebase domain id. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *domain;

/**
 *  The encoding of the response. You can use this parameter to enable html
 *  encoding.
 *
 *  Likely values:
 *    @arg @c kGTLRFreebaseEncodeHtml Encode certain characters in the response
 *        (such as tags and ambersands) using html encoding. (Value: "html")
 *    @arg @c kGTLRFreebaseEncodeOff No encoding of the response. You should not
 *        print the results directly on an web page without html-escaping the
 *        content first. (Value: "off")
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRFreebaseEncodeOff.
 */
@property(nonatomic, copy, nullable) NSString *encode;

/** Query on exact name and keys only. */
@property(nonatomic, assign) BOOL exact;

/** A filter to apply to the query. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *filter;

/**
 *  Structural format of the json response.
 *
 *  Likely values:
 *    @arg @c kGTLRFreebaseFormatAc Compact format useful for
 *        autocomplete/suggest UIs. (Value: "ac")
 *    @arg @c kGTLRFreebaseFormatClassic [DEPRECATED] Same format as was
 *        returned by api.freebase.com. (Value: "classic")
 *    @arg @c kGTLRFreebaseFormatEntity Basic information about the entities.
 *        (Value: "entity")
 *    @arg @c kGTLRFreebaseFormatGuids [DEPRECATED] Ordered list of a freebase
 *        guids. (Value: "guids")
 *    @arg @c kGTLRFreebaseFormatIds Ordered list of freebase ids. (Value:
 *        "ids")
 *    @arg @c kGTLRFreebaseFormatMids Ordered list of freebase mids. (Value:
 *        "mids")
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRFreebaseFormatEntity.
 */
@property(nonatomic, copy, nullable) NSString *format;

/**
 *  The keyword to request help on.
 *
 *  Likely values:
 *    @arg @c kGTLRFreebaseHelpLangs The language codes served by the service.
 *        (Value: "langs")
 *    @arg @c kGTLRFreebaseHelpMappings The property/path mappings supported by
 *        the filter and output request parameters. (Value: "mappings")
 *    @arg @c kGTLRFreebaseHelpPredicates The predicates and path-terminating
 *        properties supported by the filter and output request parameters.
 *        (Value: "predicates")
 */
@property(nonatomic, copy, nullable) NSString *help;

/** Whether to indent the json results or not. */
@property(nonatomic, assign) BOOL indent;

/** The code of the language to run the query with. Default is 'en'. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *lang;

/**
 *  Maximum number of results to return.
 *
 *  @note If not set, the documented server-side default will be 20.
 */
@property(nonatomic, assign) NSInteger limit;

/** A mid to use instead of a query. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *mid;

/** The MQL query to run againist the results to extract more data. */
@property(nonatomic, copy, nullable) NSString *mqlOutput;

/** An output expression to request data from matches. */
@property(nonatomic, copy, nullable) NSString *output;

/** Prefix match against names and aliases. */
@property(nonatomic, assign) BOOL prefixed;

/** Query term to search for. */
@property(nonatomic, copy, nullable) NSString *query;

/**
 *  Relevance scoring algorithm to use.
 *
 *  Likely values:
 *    @arg @c kGTLRFreebaseScoringEntity Use freebase and popularity entity
 *        ranking. (Value: "entity")
 *    @arg @c kGTLRFreebaseScoringFreebase Use freebase entity ranking. (Value:
 *        "freebase")
 *    @arg @c kGTLRFreebaseScoringSchema Use schema ranking for properties and
 *        types. (Value: "schema")
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRFreebaseScoringEntity.
 */
@property(nonatomic, copy, nullable) NSString *scoring;

/**
 *  Request 'did you mean' suggestions
 *
 *  Likely values:
 *    @arg @c kGTLRFreebaseSpellAlways Request spelling suggestions for any
 *        query at least three characters long. (Value: "always")
 *    @arg @c kGTLRFreebaseSpellNoResults Request spelling suggestions if no
 *        results were found. (Value: "no_results")
 *    @arg @c kGTLRFreebaseSpellNoSpelling Don't request spelling suggestions.
 *        (Value: "no_spelling")
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRFreebaseSpellNoSpelling.
 */
@property(nonatomic, copy, nullable) NSString *spell;

/** Query on stemmed names and aliases. May not be used with prefixed. */
@property(nonatomic, assign) BOOL stemmed;

/** Restrict to topics with this Freebase type id. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *type;

/** A rule to match against. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *with;

/** A rule to not match against. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *without;

/**
 *  Fetches the requested resource data as a @c GTLRDataObject.
 *
 *  Search Freebase open data.
 *
 *  @returns GTLRFreebaseQuery_Search
 */
+ (instancetype)queryForMedia;

@end

NS_ASSUME_NONNULL_END
