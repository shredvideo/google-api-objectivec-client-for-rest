// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Stackdriver Trace API (cloudtrace/v1)
// Description:
//   Send and retrieve trace data from Stackdriver Trace. Data is generated and
//   available by default for all App Engine applications. Data from other
//   applications can be written to Stackdriver Trace for display, reporting,
//   and analysis.
// Documentation:
//   https://cloud.google.com/trace

#import "GTLRCloudTraceQuery.h"

#import "GTLRCloudTraceObjects.h"

// ----------------------------------------------------------------------------
// Constants

// view
NSString * const kGTLRCloudTraceViewComplete            = @"COMPLETE";
NSString * const kGTLRCloudTraceViewMinimal             = @"MINIMAL";
NSString * const kGTLRCloudTraceViewRootspan            = @"ROOTSPAN";
NSString * const kGTLRCloudTraceViewViewTypeUnspecified = @"VIEW_TYPE_UNSPECIFIED";

// ----------------------------------------------------------------------------
// Query Classes
//

@implementation GTLRCloudTraceQuery

@dynamic fields;

@end

@implementation GTLRCloudTraceQuery_ProjectsPatchTraces

@dynamic projectId;

+ (instancetype)queryWithObject:(GTLRCloudTrace_Traces *)object
                      projectId:(NSString *)projectId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"projectId" ];
  NSString *pathURITemplate = @"v1/projects/{projectId}/traces";
  GTLRCloudTraceQuery_ProjectsPatchTraces *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.projectId = projectId;
  query.expectedObjectClass = [GTLRCloudTrace_Empty class];
  query.loggingName = @"cloudtrace.projects.patchTraces";
  return query;
}

@end

@implementation GTLRCloudTraceQuery_ProjectsTracesGet

@dynamic projectId, traceId;

+ (instancetype)queryWithProjectId:(NSString *)projectId
                           traceId:(NSString *)traceId {
  NSArray *pathParams = @[
    @"projectId", @"traceId"
  ];
  NSString *pathURITemplate = @"v1/projects/{projectId}/traces/{traceId}";
  GTLRCloudTraceQuery_ProjectsTracesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.projectId = projectId;
  query.traceId = traceId;
  query.expectedObjectClass = [GTLRCloudTrace_Trace class];
  query.loggingName = @"cloudtrace.projects.traces.get";
  return query;
}

@end

@implementation GTLRCloudTraceQuery_ProjectsTracesList

@dynamic endTime, filter, orderBy, pageSize, pageToken, projectId, startTime,
         view;

+ (instancetype)queryWithProjectId:(NSString *)projectId {
  NSArray *pathParams = @[ @"projectId" ];
  NSString *pathURITemplate = @"v1/projects/{projectId}/traces";
  GTLRCloudTraceQuery_ProjectsTracesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.projectId = projectId;
  query.expectedObjectClass = [GTLRCloudTrace_ListTracesResponse class];
  query.loggingName = @"cloudtrace.projects.traces.list";
  return query;
}

@end
