// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Google Cloud Container Builder API (cloudbuild/v1)
// Description:
//   Builds container images in the cloud.
// Documentation:
//   https://cloud.google.com/container-builder/docs/

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRObject.h"
#else
  #import "GTLRObject.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRCloudBuild_Build;
@class GTLRCloudBuild_BuildOptions;
@class GTLRCloudBuild_BuildStep;
@class GTLRCloudBuild_BuiltImage;
@class GTLRCloudBuild_FileHashes;
@class GTLRCloudBuild_Hash;
@class GTLRCloudBuild_Operation;
@class GTLRCloudBuild_OperationMetadata;
@class GTLRCloudBuild_OperationResponse;
@class GTLRCloudBuild_RepoSource;
@class GTLRCloudBuild_Results;
@class GTLRCloudBuild_Source;
@class GTLRCloudBuild_SourceProvenance;
@class GTLRCloudBuild_SourceProvenanceFileHashes;
@class GTLRCloudBuild_Status;
@class GTLRCloudBuild_StatusDetailsItem;
@class GTLRCloudBuild_StorageSource;

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRCloudBuild_Build.status

/**
 *  Build was canceled by a user.
 *
 *  Value: "CANCELLED"
 */
GTLR_EXTERN NSString * const kGTLRCloudBuild_Build_Status_Cancelled;
/**
 *  Build failed to complete successfully.
 *
 *  Value: "FAILURE"
 */
GTLR_EXTERN NSString * const kGTLRCloudBuild_Build_Status_Failure;
/**
 *  Build failed due to an internal cause.
 *
 *  Value: "INTERNAL_ERROR"
 */
GTLR_EXTERN NSString * const kGTLRCloudBuild_Build_Status_InternalError;
/**
 *  Build is queued; work has not yet begun.
 *
 *  Value: "QUEUED"
 */
GTLR_EXTERN NSString * const kGTLRCloudBuild_Build_Status_Queued;
/**
 *  Build has been received and is being queued.
 *
 *  Value: "QUEUING"
 */
GTLR_EXTERN NSString * const kGTLRCloudBuild_Build_Status_Queuing;
/**
 *  Status of the build is unknown.
 *
 *  Value: "STATUS_UNKNOWN"
 */
GTLR_EXTERN NSString * const kGTLRCloudBuild_Build_Status_StatusUnknown;
/**
 *  Build finished successfully.
 *
 *  Value: "SUCCESS"
 */
GTLR_EXTERN NSString * const kGTLRCloudBuild_Build_Status_Success;
/**
 *  Build took longer than was allowed.
 *
 *  Value: "TIMEOUT"
 */
GTLR_EXTERN NSString * const kGTLRCloudBuild_Build_Status_Timeout;
/**
 *  Build is being executed.
 *
 *  Value: "WORKING"
 */
GTLR_EXTERN NSString * const kGTLRCloudBuild_Build_Status_Working;

// ----------------------------------------------------------------------------
// GTLRCloudBuild_BuildOptions.requestedVerifyOption

/**
 *  Not a verifiable build. (default)
 *
 *  Value: "NOT_VERIFIED"
 */
GTLR_EXTERN NSString * const kGTLRCloudBuild_BuildOptions_RequestedVerifyOption_NotVerified;
/**
 *  Verified build.
 *
 *  Value: "VERIFIED"
 */
GTLR_EXTERN NSString * const kGTLRCloudBuild_BuildOptions_RequestedVerifyOption_Verified;

// ----------------------------------------------------------------------------
// GTLRCloudBuild_BuildOptions.sourceProvenanceHash

/** Value: "NONE" */
GTLR_EXTERN NSString * const kGTLRCloudBuild_BuildOptions_SourceProvenanceHash_None;
/** Value: "SHA256" */
GTLR_EXTERN NSString * const kGTLRCloudBuild_BuildOptions_SourceProvenanceHash_Sha256;

// ----------------------------------------------------------------------------
// GTLRCloudBuild_Hash.type

/**
 *  No hash requested.
 *
 *  Value: "NONE"
 */
GTLR_EXTERN NSString * const kGTLRCloudBuild_Hash_Type_None;
/**
 *  Use a sha256 hash.
 *
 *  Value: "SHA256"
 */
GTLR_EXTERN NSString * const kGTLRCloudBuild_Hash_Type_Sha256;

/**
 *  A build resource in the Container Builder API.
 *  At a high level, a Build describes where to find source code, how to build
 *  it (for example, the builder image to run on the source), and what tag to
 *  apply to the built image when it is pushed to Google Container Registry.
 */
@interface GTLRCloudBuild_Build : GTLRObject

/**
 *  Time at which the build was created.
 *  \@OutputOnly
 */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Time at which execution of the build was finished.
 *  \@OutputOnly
 */
@property(nonatomic, strong, nullable) GTLRDateTime *finishTime;

/**
 *  Unique identifier of the build.
 *  \@OutputOnly
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  List of images expected to be built and pushed to Google Container
 *  Registry. If an image is listed here and the image is not produced by
 *  one of the build steps, the build will fail. Any images present when
 *  the build steps are complete will be pushed to Container Registry.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *images;

/**
 *  Google Cloud Storage bucket where logs should be written (see
 *  [Bucket Name
 *  Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
 *  Logs file names will be of the format `${logs_bucket}/log-${build_id}.txt`.
 */
@property(nonatomic, copy, nullable) NSString *logsBucket;

/** Special options for this build. */
@property(nonatomic, strong, nullable) GTLRCloudBuild_BuildOptions *options;

/**
 *  ID of the project.
 *  \@OutputOnly.
 */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Results of the build.
 *  \@OutputOnly
 */
@property(nonatomic, strong, nullable) GTLRCloudBuild_Results *results;

/** Describes where to find the source files to build. */
@property(nonatomic, strong, nullable) GTLRCloudBuild_Source *source;

/**
 *  A permanent fixed identifier for source.
 *  \@OutputOnly
 */
@property(nonatomic, strong, nullable) GTLRCloudBuild_SourceProvenance *sourceProvenance;

/**
 *  Time at which execution of the build was started.
 *  \@OutputOnly
 */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

/**
 *  Status of the build.
 *  \@OutputOnly
 *
 *  Likely values:
 *    @arg @c kGTLRCloudBuild_Build_Status_Cancelled Build was canceled by a
 *        user. (Value: "CANCELLED")
 *    @arg @c kGTLRCloudBuild_Build_Status_Failure Build failed to complete
 *        successfully. (Value: "FAILURE")
 *    @arg @c kGTLRCloudBuild_Build_Status_InternalError Build failed due to an
 *        internal cause. (Value: "INTERNAL_ERROR")
 *    @arg @c kGTLRCloudBuild_Build_Status_Queued Build is queued; work has not
 *        yet begun. (Value: "QUEUED")
 *    @arg @c kGTLRCloudBuild_Build_Status_Queuing Build has been received and
 *        is being queued. (Value: "QUEUING")
 *    @arg @c kGTLRCloudBuild_Build_Status_StatusUnknown Status of the build is
 *        unknown. (Value: "STATUS_UNKNOWN")
 *    @arg @c kGTLRCloudBuild_Build_Status_Success Build finished successfully.
 *        (Value: "SUCCESS")
 *    @arg @c kGTLRCloudBuild_Build_Status_Timeout Build took longer than was
 *        allowed. (Value: "TIMEOUT")
 *    @arg @c kGTLRCloudBuild_Build_Status_Working Build is being executed.
 *        (Value: "WORKING")
 */
@property(nonatomic, copy, nullable) NSString *status;

/**
 *  Customer-readable message about the current status.
 *  \@OutputOnly
 */
@property(nonatomic, copy, nullable) NSString *statusDetail;

/** Describes the operations to be performed on the workspace. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBuild_BuildStep *> *steps;

/**
 *  Amount of time that this build should be allowed to run, to second
 *  granularity. If this amount of time elapses, work on the build will cease
 *  and the build status will be TIMEOUT.
 *  Default time is ten minutes.
 *
 *  String format is #.###s (seconds).
 */
@property(nonatomic, copy, nullable) NSString *timeout;

@end


/**
 *  Metadata for build operations.
 */
@interface GTLRCloudBuild_BuildOperationMetadata : GTLRObject

/** The build that the operation is tracking. */
@property(nonatomic, strong, nullable) GTLRCloudBuild_Build *build;

@end


/**
 *  Optional arguments to enable specific features of builds.
 */
@interface GTLRCloudBuild_BuildOptions : GTLRObject

/**
 *  Options for a verifiable build with details uploaded to the Analysis API.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudBuild_BuildOptions_RequestedVerifyOption_NotVerified Not
 *        a verifiable build. (default) (Value: "NOT_VERIFIED")
 *    @arg @c kGTLRCloudBuild_BuildOptions_RequestedVerifyOption_Verified
 *        Verified build. (Value: "VERIFIED")
 */
@property(nonatomic, copy, nullable) NSString *requestedVerifyOption;

/** Requested hash for SourceProvenance. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *sourceProvenanceHash;

@end


/**
 *  BuildStep describes a step to perform in the build pipeline.
 */
@interface GTLRCloudBuild_BuildStep : GTLRObject

/** Command-line arguments to use when running this step's container. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *args;

/**
 *  Working directory (relative to project source root) to use when running
 *  this operation's container.
 */
@property(nonatomic, copy, nullable) NSString *dir;

/** Additional environment variables to set for this step's container. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *env;

/**
 *  Optional unique identifier for this build step, used in wait_for to
 *  reference this build step as a dependency.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Name of the container image to use for creating this stage in the
 *  pipeline, as presented to `docker pull`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The ID(s) of the step(s) that this build step depends on.
 *  This build step will not start until all the build steps in wait_for
 *  have completed successfully. If wait_for is empty, this build step will
 *  start when all previous build steps in the Build.Steps list have completed
 *  successfully.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *waitFor;

@end


/**
 *  BuiltImage describes an image built by the pipeline.
 */
@interface GTLRCloudBuild_BuiltImage : GTLRObject

/** Docker Registry 2.0 digest. */
@property(nonatomic, copy, nullable) NSString *digest;

/**
 *  Name used to push the container image to Google Container Registry, as
 *  presented to `docker push`.
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Request to cancel an ongoing build.
 */
@interface GTLRCloudBuild_CancelBuildRequest : GTLRObject
@end


/**
 *  Container message for hashes of byte content of files, used in
 *  SourceProvenance messages to verify integrity of source input to the build.
 */
@interface GTLRCloudBuild_FileHashes : GTLRObject

/** Collection of file hashes. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBuild_Hash *> *fileHash;

@end


/**
 *  Container message for hash values.
 */
@interface GTLRCloudBuild_Hash : GTLRObject

/**
 *  The type of hash that was performed.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudBuild_Hash_Type_None No hash requested. (Value: "NONE")
 *    @arg @c kGTLRCloudBuild_Hash_Type_Sha256 Use a sha256 hash. (Value:
 *        "SHA256")
 */
@property(nonatomic, copy, nullable) NSString *type;

/**
 *  The hash value.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  Response including listed builds.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "builds" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCloudBuild_ListBuildsResponse : GTLRCollectionObject

/**
 *  Builds will be sorted by create_time, descending.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBuild_Build *> *builds;

/** Token to receive the next page of results. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  The response message for Operations.ListOperations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "operations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCloudBuild_ListOperationsResponse : GTLRCollectionObject

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  A list of operations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBuild_Operation *> *operations;

@end


/**
 *  This resource represents a long-running operation that is the result of a
 *  network API call.
 */
@interface GTLRCloudBuild_Operation : GTLRObject

/**
 *  If the value is `false`, it means the operation is still in progress.
 *  If true, the operation is completed, and either `error` or `response` is
 *  available.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *done;

/** The error result of the operation in case of failure. */
@property(nonatomic, strong, nullable) GTLRCloudBuild_Status *error;

/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time.
 *  Some services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 */
@property(nonatomic, strong, nullable) GTLRCloudBuild_OperationMetadata *metadata;

/**
 *  The server-assigned name, which is only unique within the same service that
 *  originally returns it. If you use the default HTTP mapping, the
 *  `name` should have the format of `operations/some/unique/name`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The normal response of the operation in case of success. If the original
 *  method returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx`
 *  is the original method name. For example, if the original method name
 *  is `TakeSnapshot()`, the inferred response type is
 *  `TakeSnapshotResponse`.
 */
@property(nonatomic, strong, nullable) GTLRCloudBuild_OperationResponse *response;

@end


/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time.
 *  Some services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudBuild_OperationMetadata : GTLRObject
@end


/**
 *  The normal response of the operation in case of success. If the original
 *  method returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx`
 *  is the original method name. For example, if the original method name
 *  is `TakeSnapshot()`, the inferred response type is
 *  `TakeSnapshotResponse`.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudBuild_OperationResponse : GTLRObject
@end


/**
 *  RepoSource describes the location of the source in a Google Cloud Source
 *  Repository.
 */
@interface GTLRCloudBuild_RepoSource : GTLRObject

/** Name of the branch to build. */
@property(nonatomic, copy, nullable) NSString *branchName;

/** Explicit commit SHA to build. */
@property(nonatomic, copy, nullable) NSString *commitSha;

/**
 *  ID of the project that owns the repo. If omitted, the project ID requesting
 *  the build is assumed.
 */
@property(nonatomic, copy, nullable) NSString *projectId;

/** Name of the repo. If omitted, the name "default" is assumed. */
@property(nonatomic, copy, nullable) NSString *repoName;

/** Name of the tag to build. */
@property(nonatomic, copy, nullable) NSString *tagName;

@end


/**
 *  Results describes the artifacts created by the build pipeline.
 */
@interface GTLRCloudBuild_Results : GTLRObject

/**
 *  List of build step digests, in order corresponding to build step indices.
 *  next id = 4
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *buildStepImages;

/** Images that were built as a part of the build. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBuild_BuiltImage *> *images;

@end


/**
 *  Source describes the location of the source in a supported storage
 *  service.
 */
@interface GTLRCloudBuild_Source : GTLRObject

/** If provided, get source from this location in a Cloud Repo. */
@property(nonatomic, strong, nullable) GTLRCloudBuild_RepoSource *repoSource;

/**
 *  If provided, get the source from this location in in Google Cloud
 *  Storage.
 */
@property(nonatomic, strong, nullable) GTLRCloudBuild_StorageSource *storageSource;

@end


/**
 *  Provenance of the source. Ways to find the original source, or verify that
 *  some source was used for this build.
 */
@interface GTLRCloudBuild_SourceProvenance : GTLRObject

/**
 *  Hash(es) of the build source, which can be used to verify that the original
 *  source integrity was maintained in the build. Note that FileHashes will
 *  only be populated if BuildOptions has requested a SourceProvenanceHash.
 *  The keys to this map are file paths used as build source and the values
 *  contain the hash values for those files.
 *  If the build source came in a single package such as a gzipped tarfile
 *  (.tar.gz), the FileHash will be for the single path to that file.
 *  \@OutputOnly
 */
@property(nonatomic, strong, nullable) GTLRCloudBuild_SourceProvenanceFileHashes *fileHashes;

/**
 *  A copy of the build's source.repo_source, if exists, with any
 *  revisions resolved.
 */
@property(nonatomic, strong, nullable) GTLRCloudBuild_RepoSource *resolvedRepoSource;

/**
 *  A copy of the build's source.storage_source, if exists, with any
 *  generations resolved.
 */
@property(nonatomic, strong, nullable) GTLRCloudBuild_StorageSource *resolvedStorageSource;

@end


/**
 *  Hash(es) of the build source, which can be used to verify that the original
 *  source integrity was maintained in the build. Note that FileHashes will
 *  only be populated if BuildOptions has requested a SourceProvenanceHash.
 *  The keys to this map are file paths used as build source and the values
 *  contain the hash values for those files.
 *  If the build source came in a single package such as a gzipped tarfile
 *  (.tar.gz), the FileHash will be for the single path to that file.
 *  \@OutputOnly
 *
 *  @note This class is documented as having more properties of
 *        GTLRCloudBuild_FileHashes. Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudBuild_SourceProvenanceFileHashes : GTLRObject
@end


/**
 *  The `Status` type defines a logical error model that is suitable for
 *  different
 *  programming environments, including REST APIs and RPC APIs. It is used by
 *  [gRPC](https://github.com/grpc). The error model is designed to be:
 *  - Simple to use and understand for most users
 *  - Flexible enough to meet unexpected needs
 *  # Overview
 *  The `Status` message contains three pieces of data: error code, error
 *  message,
 *  and error details. The error code should be an enum value of
 *  google.rpc.Code, but it may accept additional error codes if needed. The
 *  error message should be a developer-facing English message that helps
 *  developers *understand* and *resolve* the error. If a localized user-facing
 *  error message is needed, put the localized message in the error details or
 *  localize it in the client. The optional error details may contain arbitrary
 *  information about the error. There is a predefined set of error detail types
 *  in the package `google.rpc` which can be used for common error conditions.
 *  # Language mapping
 *  The `Status` message is the logical representation of the error model, but
 *  it
 *  is not necessarily the actual wire format. When the `Status` message is
 *  exposed in different client libraries and different wire protocols, it can
 *  be
 *  mapped differently. For example, it will likely be mapped to some exceptions
 *  in Java, but more likely mapped to some error codes in C.
 *  # Other uses
 *  The error model and the `Status` message can be used in a variety of
 *  environments, either with or without APIs, to provide a
 *  consistent developer experience across different environments.
 *  Example uses of this error model include:
 *  - Partial errors. If a service needs to return partial errors to the client,
 *  it may embed the `Status` in the normal response to indicate the partial
 *  errors.
 *  - Workflow errors. A typical workflow has multiple steps. Each step may
 *  have a `Status` message for error reporting purpose.
 *  - Batch operations. If a client uses batch request and batch response, the
 *  `Status` message should be used directly inside batch response, one for
 *  each error sub-response.
 *  - Asynchronous operations. If an API call embeds asynchronous operation
 *  results in its response, the status of those operations should be
 *  represented directly using the `Status` message.
 *  - Logging. If some API errors are stored in logs, the message `Status` could
 *  be used directly after any stripping needed for security/privacy reasons.
 */
@interface GTLRCloudBuild_Status : GTLRObject

/**
 *  The status code, which should be an enum value of google.rpc.Code.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *code;

/**
 *  A list of messages that carry the error details. There will be a
 *  common set of message types for APIs to use.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBuild_StatusDetailsItem *> *details;

/**
 *  A developer-facing error message, which should be in English. Any
 *  user-facing error message should be localized and sent in the
 *  google.rpc.Status.details field, or localized by the client.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  GTLRCloudBuild_StatusDetailsItem
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudBuild_StatusDetailsItem : GTLRObject
@end


/**
 *  StorageSource describes the location of the source in an archive file in
 *  Google Cloud Storage.
 */
@interface GTLRCloudBuild_StorageSource : GTLRObject

/**
 *  Google Cloud Storage bucket containing source (see
 *  [Bucket Name
 *  Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
 */
@property(nonatomic, copy, nullable) NSString *bucket;

/**
 *  Google Cloud Storage generation for the object. If the generation is
 *  omitted, the latest generation will be used.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *generation;

/**
 *  Google Cloud Storage object containing source.
 *  This object must be a gzipped archive file (.tar.gz) containing source to
 *  build.
 */
@property(nonatomic, copy, nullable) NSString *object;

@end

NS_ASSUME_NONNULL_END
