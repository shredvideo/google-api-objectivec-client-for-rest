// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Google Cloud Logging API (logging/v2beta1)
// Description:
//   Writes log entries and manages your logs, log sinks, and logs-based
//   metrics.
// Documentation:
//   https://cloud.google.com/logging/docs/

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRObject.h"
#else
  #import "GTLRObject.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRLogging_HttpRequest;
@class GTLRLogging_LabelDescriptor;
@class GTLRLogging_ListLogEntriesResponseProjectIdErrors;
@class GTLRLogging_LogEntry;
@class GTLRLogging_LogEntryJsonPayload;
@class GTLRLogging_LogEntryLabels;
@class GTLRLogging_LogEntryOperation;
@class GTLRLogging_LogEntryProtoPayload;
@class GTLRLogging_LogLine;
@class GTLRLogging_LogMetric;
@class GTLRLogging_LogSink;
@class GTLRLogging_MonitoredResource;
@class GTLRLogging_MonitoredResourceDescriptor;
@class GTLRLogging_MonitoredResourceLabels;
@class GTLRLogging_SourceLocation;
@class GTLRLogging_SourceReference;
@class GTLRLogging_Status;
@class GTLRLogging_StatusDetailsItem;
@class GTLRLogging_WriteLogEntriesRequestLabels;

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRLogging_LabelDescriptor.valueType

/** Value: "BOOL" */
GTLR_EXTERN NSString * const kGTLRLogging_LabelDescriptor_ValueType_Bool;
/** Value: "INT64" */
GTLR_EXTERN NSString * const kGTLRLogging_LabelDescriptor_ValueType_Int64;
/** Value: "STRING" */
GTLR_EXTERN NSString * const kGTLRLogging_LabelDescriptor_ValueType_String;

// ----------------------------------------------------------------------------
// GTLRLogging_LogEntry.severity

/** Value: "ALERT" */
GTLR_EXTERN NSString * const kGTLRLogging_LogEntry_Severity_Alert;
/** Value: "CRITICAL" */
GTLR_EXTERN NSString * const kGTLRLogging_LogEntry_Severity_Critical;
/** Value: "DEBUG" */
GTLR_EXTERN NSString * const kGTLRLogging_LogEntry_Severity_Debug;
/** Value: "DEFAULT" */
GTLR_EXTERN NSString * const kGTLRLogging_LogEntry_Severity_Default;
/** Value: "EMERGENCY" */
GTLR_EXTERN NSString * const kGTLRLogging_LogEntry_Severity_Emergency;
/** Value: "ERROR" */
GTLR_EXTERN NSString * const kGTLRLogging_LogEntry_Severity_Error;
/** Value: "INFO" */
GTLR_EXTERN NSString * const kGTLRLogging_LogEntry_Severity_Info;
/** Value: "NOTICE" */
GTLR_EXTERN NSString * const kGTLRLogging_LogEntry_Severity_Notice;
/** Value: "WARNING" */
GTLR_EXTERN NSString * const kGTLRLogging_LogEntry_Severity_Warning;

// ----------------------------------------------------------------------------
// GTLRLogging_LogLine.severity

/** Value: "ALERT" */
GTLR_EXTERN NSString * const kGTLRLogging_LogLine_Severity_Alert;
/** Value: "CRITICAL" */
GTLR_EXTERN NSString * const kGTLRLogging_LogLine_Severity_Critical;
/** Value: "DEBUG" */
GTLR_EXTERN NSString * const kGTLRLogging_LogLine_Severity_Debug;
/** Value: "DEFAULT" */
GTLR_EXTERN NSString * const kGTLRLogging_LogLine_Severity_Default;
/** Value: "EMERGENCY" */
GTLR_EXTERN NSString * const kGTLRLogging_LogLine_Severity_Emergency;
/** Value: "ERROR" */
GTLR_EXTERN NSString * const kGTLRLogging_LogLine_Severity_Error;
/** Value: "INFO" */
GTLR_EXTERN NSString * const kGTLRLogging_LogLine_Severity_Info;
/** Value: "NOTICE" */
GTLR_EXTERN NSString * const kGTLRLogging_LogLine_Severity_Notice;
/** Value: "WARNING" */
GTLR_EXTERN NSString * const kGTLRLogging_LogLine_Severity_Warning;

// ----------------------------------------------------------------------------
// GTLRLogging_LogSink.outputVersionFormat

/** Value: "V1" */
GTLR_EXTERN NSString * const kGTLRLogging_LogSink_OutputVersionFormat_V1;
/** Value: "V2" */
GTLR_EXTERN NSString * const kGTLRLogging_LogSink_OutputVersionFormat_V2;
/** Value: "VERSION_FORMAT_UNSPECIFIED" */
GTLR_EXTERN NSString * const kGTLRLogging_LogSink_OutputVersionFormat_VersionFormatUnspecified;

/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance: service Foo { rpc
 *  Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON
 *  representation for `Empty` is empty JSON object `{}`.
 */
@interface GTLRLogging_Empty : GTLRObject
@end


/**
 *  A common proto for logging HTTP requests.
 */
@interface GTLRLogging_HttpRequest : GTLRObject

/**
 *  The number of HTTP response bytes inserted into cache. Set only when a cache
 *  fill was attempted.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *cacheFillBytes;

/**
 *  Whether or not an entity was served from cache (with or without validation).
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *cacheHit;

/**
 *  Whether or not a cache lookup was attempted.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *cacheLookup;

/**
 *  Whether or not the response was validated with the origin server before
 *  being served from cache. This field is only meaningful if `cache_hit` is
 *  True.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *cacheValidatedWithOriginServer;

/**
 *  The referer URL of the request, as defined in [HTTP/1.1 Header Field
 *  Definitions](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html).
 */
@property(nonatomic, copy, nullable) NSString *referer;

/**
 *  The IP address (IPv4 or IPv6) of the client that issued the HTTP request.
 *  Examples: `"192.168.1.1"`, `"FE80::0202:B3FF:FE1E:8329"`.
 */
@property(nonatomic, copy, nullable) NSString *remoteIp;

/** The request method. Examples: `"GET"`, `"HEAD"`, `"PUT"`, `"POST"`. */
@property(nonatomic, copy, nullable) NSString *requestMethod;

/**
 *  The size of the HTTP request message in bytes, including the request headers
 *  and the request body.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *requestSize;

/**
 *  The scheme (http, https), the host name, the path and the query portion of
 *  the URL that was requested. Example:
 *  `"http://example.com/some/info?color=red"`.
 */
@property(nonatomic, copy, nullable) NSString *requestUrl;

/**
 *  The size of the HTTP response message sent back to the client, in bytes,
 *  including the response headers and the response body.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *responseSize;

/**
 *  The response code indicating the status of response. Examples: 200, 404.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *status;

/**
 *  The user agent sent by the client. Example: `"Mozilla/4.0 (compatible; MSIE
 *  6.0; Windows 98; Q312461; .NET CLR 1.0.3705)"`.
 */
@property(nonatomic, copy, nullable) NSString *userAgent;

@end


/**
 *  A description of a label.
 */
@interface GTLRLogging_LabelDescriptor : GTLRObject

/**
 *  A human-readable description for the label.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** The label key. */
@property(nonatomic, copy, nullable) NSString *key;

/**
 *  The type of data that can be assigned to the label.
 *
 *  Likely values:
 *    @arg @c kGTLRLogging_LabelDescriptor_ValueType_Bool Value "BOOL"
 *    @arg @c kGTLRLogging_LabelDescriptor_ValueType_Int64 Value "INT64"
 *    @arg @c kGTLRLogging_LabelDescriptor_ValueType_String Value "STRING"
 */
@property(nonatomic, copy, nullable) NSString *valueType;

@end


/**
 *  The parameters to `ListLogEntries`.
 */
@interface GTLRLogging_ListLogEntriesRequest : GTLRObject

/**
 *  Optional. An [advanced logs filter](/logging/docs/view/advanced_filters).
 *  The filter is compared against all log entries in the projects specified by
 *  `projectIds`. Only entries that match the filter are retrieved. An empty
 *  filter matches all log entries.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Optional. How the results should be sorted. Presently, the only permitted
 *  values are `"timestamp asc"` (default) and `"timestamp desc"`. The first
 *  option returns entries in order of increasing values of `LogEntry.timestamp`
 *  (oldest first), and the second option returns entries in order of decreasing
 *  timestamps (newest first). Entries with equal timestamps are returned in
 *  order of `LogEntry.insertId`.
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  Optional. The maximum number of results to return from this request. You
 *  must check for presence of `nextPageToken` to determine if additional
 *  results are available, which you can retrieve by passing the `nextPageToken`
 *  value as the `pageToken` parameter in the next request.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *pageSize;

/**
 *  Optional. If the `pageToken` parameter is supplied, then the next page of
 *  results is retrieved. The `pageToken` parameter must be set to the value of
 *  the `nextPageToken` from the previous response. The values of `projectIds`,
 *  `filter`, and `orderBy` must be the same as in the previous request.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Optional. If true, read access to all projects is not required and results
 *  will be returned for the subset of projects for which read access is
 *  permitted (empty subset is permitted).
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *partialSuccess;

/**
 *  Required. One or more project IDs or project numbers from which to retrieve
 *  log entries. Examples of a project ID: `"my-project-1A"`, `"1234567890"`.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *projectIds;

@end


/**
 *  Result returned from `ListLogEntries`.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "entries" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRLogging_ListLogEntriesResponse : GTLRCollectionObject

/**
 *  A list of log entries.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRLogging_LogEntry *> *entries;

/**
 *  If there are more results than were returned, then `nextPageToken` is
 *  included in the response. To get the next set of results, call this method
 *  again using the value of `nextPageToken` as `pageToken`.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  If partial_success is true, contains the project ids that had errors and the
 *  associated errors.
 */
@property(nonatomic, strong, nullable) GTLRLogging_ListLogEntriesResponseProjectIdErrors *projectIdErrors;

@end


/**
 *  If partial_success is true, contains the project ids that had errors and the
 *  associated errors.
 *
 *  @note This class is documented as having more properties of
 *        GTLRLogging_Status. Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRLogging_ListLogEntriesResponseProjectIdErrors : GTLRObject
@end


/**
 *  Result returned from ListLogMetrics.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "metrics" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRLogging_ListLogMetricsResponse : GTLRCollectionObject

/**
 *  A list of logs-based metrics.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRLogging_LogMetric *> *metrics;

/**
 *  If there are more results than were returned, then `nextPageToken` is
 *  included in the response. To get the next set of results, call this method
 *  again using the value of `nextPageToken` as `pageToken`.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Result returned from ListMonitoredResourceDescriptors.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "resourceDescriptors" property. If returned as the result of a
 *        query, it should support automatic pagination (when @c
 *        shouldFetchNextPages is enabled).
 */
@interface GTLRLogging_ListMonitoredResourceDescriptorsResponse : GTLRCollectionObject

/**
 *  If there are more results than were returned, then `nextPageToken` is
 *  included in the response. To get the next set of results, call this method
 *  again using the value of `nextPageToken` as `pageToken`.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  A list of resource descriptors.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRLogging_MonitoredResourceDescriptor *> *resourceDescriptors;

@end


/**
 *  Result returned from `ListSinks`.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "sinks" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRLogging_ListSinksResponse : GTLRCollectionObject

/**
 *  If there are more results than were returned, then `nextPageToken` is
 *  included in the response. To get the next set of results, call this method
 *  again using the value of `nextPageToken` as `pageToken`.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  A list of sinks.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRLogging_LogSink *> *sinks;

@end


/**
 *  An individual entry in a log.
 */
@interface GTLRLogging_LogEntry : GTLRObject

/**
 *  Optional. Information about the HTTP request associated with this log entry,
 *  if applicable.
 */
@property(nonatomic, strong, nullable) GTLRLogging_HttpRequest *httpRequest;

/**
 *  Optional. A unique ID for the log entry. If you provide this field, the
 *  logging service considers other log entries in the same log with the same ID
 *  as duplicates which can be removed. If omitted, Cloud Logging will generate
 *  a unique ID for this log entry.
 */
@property(nonatomic, copy, nullable) NSString *insertId;

/**
 *  The log entry payload, represented as a structure that is expressed as a
 *  JSON object.
 */
@property(nonatomic, strong, nullable) GTLRLogging_LogEntryJsonPayload *jsonPayload;

/**
 *  Optional. A set of user-defined (key, value) data that provides additional
 *  information about the log entry.
 */
@property(nonatomic, strong, nullable) GTLRLogging_LogEntryLabels *labels;

/**
 *  Required. The resource name of the log to which this log entry belongs. The
 *  format of the name is `"projects/
 *  /logs/"`. Examples: `"projects/my-projectid/logs/syslog"`,
 *  `"projects/1234567890/logs/library.googleapis.com%2Fbook_log"`. The log ID
 *  part of resource name must be less than 512 characters long and can only
 *  include the following characters: upper and lower case alphanumeric
 *  characters: [A-Za-z0-9]; and punctuation characters: forward-slash,
 *  underscore, hyphen, and period. Forward-slash (`/`) characters in the log ID
 *  must be URL-encoded.
 */
@property(nonatomic, copy, nullable) NSString *logName;

/**
 *  Optional. Information about an operation associated with the log entry, if
 *  applicable.
 */
@property(nonatomic, strong, nullable) GTLRLogging_LogEntryOperation *operation;

/**
 *  The log entry payload, represented as a protocol buffer. You can only use
 *  `protoPayload` values that belong to a set of approved types.
 */
@property(nonatomic, strong, nullable) GTLRLogging_LogEntryProtoPayload *protoPayload;

/**
 *  Required. The monitored resource associated with this log entry. Example: a
 *  log entry that reports a database error would be associated with the
 *  monitored resource designating the particular database that reported the
 *  error.
 */
@property(nonatomic, strong, nullable) GTLRLogging_MonitoredResource *resource;

/**
 *  Optional. The severity of the log entry. The default value is
 *  `LogSeverity.DEFAULT`.
 *
 *  Likely values:
 *    @arg @c kGTLRLogging_LogEntry_Severity_Alert Value "ALERT"
 *    @arg @c kGTLRLogging_LogEntry_Severity_Critical Value "CRITICAL"
 *    @arg @c kGTLRLogging_LogEntry_Severity_Debug Value "DEBUG"
 *    @arg @c kGTLRLogging_LogEntry_Severity_Default Value "DEFAULT"
 *    @arg @c kGTLRLogging_LogEntry_Severity_Emergency Value "EMERGENCY"
 *    @arg @c kGTLRLogging_LogEntry_Severity_Error Value "ERROR"
 *    @arg @c kGTLRLogging_LogEntry_Severity_Info Value "INFO"
 *    @arg @c kGTLRLogging_LogEntry_Severity_Notice Value "NOTICE"
 *    @arg @c kGTLRLogging_LogEntry_Severity_Warning Value "WARNING"
 */
@property(nonatomic, copy, nullable) NSString *severity;

/** The log entry payload, represented as a Unicode string (UTF-8). */
@property(nonatomic, copy, nullable) NSString *textPayload;

/**
 *  Optional. The time the event described by the log entry occurred. If
 *  omitted, Cloud Logging will use the time the log entry is written.
 */
@property(nonatomic, copy, nullable) NSString *timestamp;

@end


/**
 *  The log entry payload, represented as a structure that is expressed as a
 *  JSON object.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRLogging_LogEntryJsonPayload : GTLRObject
@end


/**
 *  Optional. A set of user-defined (key, value) data that provides additional
 *  information about the log entry.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRLogging_LogEntryLabels : GTLRObject
@end


/**
 *  The log entry payload, represented as a protocol buffer. You can only use
 *  `protoPayload` values that belong to a set of approved types.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRLogging_LogEntryProtoPayload : GTLRObject
@end


/**
 *  Additional information about a potentially long-running operation with which
 *  a log entry is associated.
 */
@interface GTLRLogging_LogEntryOperation : GTLRObject

/**
 *  Optional. Set this to True if this is the first log entry in the operation.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *first;

/**
 *  Required. An arbitrary operation identifier. Log entries with the same
 *  identifier are assumed to be part of the same operation.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Optional. Set this to True if this is the last log entry in the operation.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *last;

/**
 *  Required. An arbitrary producer identifier. The combination of `id` and
 *  `producer` must be globally unique. Examples for `producer`:
 *  `"MyDivision.MyBigCompany.com"`, "github.com/MyProject/MyApplication"`.
 */
@property(nonatomic, copy, nullable) NSString *producer;

@end


/**
 *  Application log line emitted while processing a request.
 */
@interface GTLRLogging_LogLine : GTLRObject

/** App-provided log message. */
@property(nonatomic, copy, nullable) NSString *logMessage;

/**
 *  Severity of this log entry.
 *
 *  Likely values:
 *    @arg @c kGTLRLogging_LogLine_Severity_Alert Value "ALERT"
 *    @arg @c kGTLRLogging_LogLine_Severity_Critical Value "CRITICAL"
 *    @arg @c kGTLRLogging_LogLine_Severity_Debug Value "DEBUG"
 *    @arg @c kGTLRLogging_LogLine_Severity_Default Value "DEFAULT"
 *    @arg @c kGTLRLogging_LogLine_Severity_Emergency Value "EMERGENCY"
 *    @arg @c kGTLRLogging_LogLine_Severity_Error Value "ERROR"
 *    @arg @c kGTLRLogging_LogLine_Severity_Info Value "INFO"
 *    @arg @c kGTLRLogging_LogLine_Severity_Notice Value "NOTICE"
 *    @arg @c kGTLRLogging_LogLine_Severity_Warning Value "WARNING"
 */
@property(nonatomic, copy, nullable) NSString *severity;

/** Where in the source code this log message was written. */
@property(nonatomic, strong, nullable) GTLRLogging_SourceLocation *sourceLocation;

/** Approximate time when this log entry was made. */
@property(nonatomic, copy, nullable) NSString *time;

@end


/**
 *  Describes a logs-based metric. The value of the metric is the number of log
 *  entries that match a logs filter.
 */
@interface GTLRLogging_LogMetric : GTLRObject

/**
 *  A description of this metric, which is used in documentation.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  An [advanced logs filter](/logging/docs/view/advanced_filters). Example:
 *  `"logName:syslog AND severity>=ERROR"`.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Required. The client-assigned metric identifier. Example: `"severe_errors"`.
 *  Metric identifiers are limited to 1000 characters and can include only the
 *  following characters: `A-Z`, `a-z`, `0-9`, and the special characters
 *  `_-.,+!*',()%/\\`. The forward-slash character (`/`) denotes a hierarchy of
 *  name pieces, and it cannot be the first character of the name.
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Describes a sink used to export log entries outside Cloud Logging.
 */
@interface GTLRLogging_LogSink : GTLRObject

/**
 *  The export destination. See [Exporting Logs With
 *  Sinks](/logging/docs/api/tasks/exporting-logs). Examples:
 *  `"storage.googleapis.com/a-bucket"`,
 *  `"bigquery.googleapis.com/projects/a-project-id/datasets/a-dataset"`.
 */
@property(nonatomic, copy, nullable) NSString *destination;

/**
 *  An [advanced logs filter](/logging/docs/view/advanced_filters). Only log
 *  entries matching that filter are exported. The filter must be consistent
 *  with the log entry format specified by the `outputVersionFormat` parameter,
 *  regardless of the format of the log entry that was originally written to
 *  Cloud Logging. Example (V2 format):
 *  `"logName=projects/my-projectid/logs/syslog AND severity>=ERROR"`.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Required. The client-assigned sink identifier. Example:
 *  `"my-severe-errors-to-pubsub"`. Sink identifiers are limited to 1000
 *  characters and can include only the following characters: `A-Z`, `a-z`,
 *  `0-9`, and the special characters `_-.`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The log entry version to use for this sink's exported log entries. This
 *  version does not have to correspond to the version of the log entry when it
 *  was written to Cloud Logging.
 *
 *  Likely values:
 *    @arg @c kGTLRLogging_LogSink_OutputVersionFormat_V1 Value "V1"
 *    @arg @c kGTLRLogging_LogSink_OutputVersionFormat_V2 Value "V2"
 *    @arg @c kGTLRLogging_LogSink_OutputVersionFormat_VersionFormatUnspecified
 *        Value "VERSION_FORMAT_UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *outputVersionFormat;

@end


/**
 *  An object representing a resource that can be used for monitoring, logging,
 *  billing, or other purposes. Examples include virtual machine instances,
 *  databases, and storage devices such as disks. The `type` field identifies a
 *  MonitoredResourceDescriptor object that describes the resource's schema.
 *  Information in the `labels` field identifies the actual resource and its
 *  attributes according to the schema. For example, a particular Compute Engine
 *  VM instance could be represented by the following object, because the
 *  MonitoredResourceDescriptor for `"gce_instance"` has labels `"instance_id"`
 *  and `"zone"`: { "type": "gce_instance", "labels": { "instance_id":
 *  "my-instance", "zone": "us-central1-a" }}
 */
@interface GTLRLogging_MonitoredResource : GTLRObject

/**
 *  Required. Values for all of the labels listed in the associated monitored
 *  resource descriptor. For example, Cloud SQL databases use the labels
 *  `"database_id"` and `"zone"`.
 */
@property(nonatomic, strong, nullable) GTLRLogging_MonitoredResourceLabels *labels;

/**
 *  Required. The monitored resource type. This field must match the `type`
 *  field of a MonitoredResourceDescriptor object. For example, the type of a
 *  Cloud SQL database is `"cloudsql_database"`.
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Required. Values for all of the labels listed in the associated monitored
 *  resource descriptor. For example, Cloud SQL databases use the labels
 *  `"database_id"` and `"zone"`.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRLogging_MonitoredResourceLabels : GTLRObject
@end


/**
 *  An object that describes the schema of a MonitoredResource object using a
 *  type name and a set of labels. For example, the monitored resource
 *  descriptor for Google Compute Engine VM instances has a type of
 *  `"gce_instance"` and specifies the use of the labels `"instance_id"` and
 *  `"zone"` to identify particular VM instances. Different APIs can support
 *  different monitored resource types. APIs generally provide a `list` method
 *  that returns the monitored resource descriptors used by the API.
 */
@interface GTLRLogging_MonitoredResourceDescriptor : GTLRObject

/**
 *  Optional. A detailed description of the monitored resource type that might
 *  be used in documentation.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Optional. A concise name for the monitored resource type that might be
 *  displayed in user interfaces. For example, `"Google Cloud SQL Database"`.
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Required. A set of labels used to describe instances of this monitored
 *  resource type. For example, an individual Google Cloud SQL database is
 *  identified by values for the labels `"database_id"` and `"zone"`.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRLogging_LabelDescriptor *> *labels;

/**
 *  Optional. The resource name of the monitored resource descriptor:
 *  `"projects/{project_id}/monitoredResourceDescriptors/{type}"` where {type}
 *  is the value of the `type` field in this object and {project_id} is a
 *  project ID that provides API-specific context for accessing the type. APIs
 *  that do not use project information can use the resource name format
 *  `"monitoredResourceDescriptors/{type}"`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. The monitored resource type. For example, the type
 *  `"cloudsql_database"` represents databases in Google Cloud SQL.
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Complete log information about a single HTTP request to an App Engine
 *  application.
 */
@interface GTLRLogging_RequestLog : GTLRObject

/** App Engine release version. */
@property(nonatomic, copy, nullable) NSString *appEngineRelease;

/** Application that handled this request. */
@property(nonatomic, copy, nullable) NSString *appId;

/**
 *  An indication of the relative cost of serving this request.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *cost;

/** Time when the request finished. */
@property(nonatomic, copy, nullable) NSString *endTime;

/**
 *  Whether this request is finished or active.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *finished;

/**
 *  Whether this is the first RequestLog entry for this request. If an active
 *  request has several RequestLog entries written to Cloud Logging, this field
 *  will be set for one of them.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *first;

/** Internet host and port number of the resource being requested. */
@property(nonatomic, copy, nullable) NSString *host;

/** HTTP version of request. Example: `"HTTP/1.1"`. */
@property(nonatomic, copy, nullable) NSString *httpVersion;

/** An identifier for the instance that handled the request. */
@property(nonatomic, copy, nullable) NSString *instanceId;

/**
 *  If the instance processing this request belongs to a manually scaled module,
 *  then this is the 0-based index of the instance. Otherwise, this value is -1.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *instanceIndex;

/** Origin IP address. */
@property(nonatomic, copy, nullable) NSString *ip;

/** Latency of the request. */
@property(nonatomic, copy, nullable) NSString *latency;

/**
 *  A list of log lines emitted by the application while serving this request.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRLogging_LogLine *> *line;

/**
 *  Number of CPU megacycles used to process request.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *megaCycles;

/**
 *  Request method. Example: `"GET"`, `"HEAD"`, `"PUT"`, `"POST"`, `"DELETE"`.
 */
@property(nonatomic, copy, nullable) NSString *method;

/** Module of the application that handled this request. */
@property(nonatomic, copy, nullable) NSString *moduleId;

/**
 *  The logged-in user who made the request. Most likely, this is the part of
 *  the user's email before the `\@` sign. The field value is the same for
 *  different requests from the same user, but different users can have similar
 *  names. This information is also available to the application via the App
 *  Engine Users API. This field will be populated starting with App Engine
 *  1.9.21.
 */
@property(nonatomic, copy, nullable) NSString *nickname;

/** Time this request spent in the pending request queue. */
@property(nonatomic, copy, nullable) NSString *pendingTime;

/** Referrer URL of request. */
@property(nonatomic, copy, nullable) NSString *referrer;

/**
 *  Globally unique identifier for a request, which is based on the request
 *  start time. Request IDs for requests which started later will compare
 *  greater as strings than those for requests which started earlier.
 */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  Contains the path and query portion of the URL that was requested. For
 *  example, if the URL was "http://example.com/app?name=val", the resource
 *  would be "/app?name=val". The fragment identifier, which is identified by
 *  the `#` character, is not included.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Size in bytes sent back to client by request.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *responseSize;

/**
 *  Source code for the application that handled this request. There can be more
 *  than one source reference per deployed application if source code is
 *  distributed among multiple repositories.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRLogging_SourceReference *> *sourceReference;

/** Time when the request started. */
@property(nonatomic, copy, nullable) NSString *startTime;

/**
 *  HTTP response status code. Example: 200, 404.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *status;

/** Task name of the request, in the case of an offline request. */
@property(nonatomic, copy, nullable) NSString *taskName;

/** Queue name of the request, in the case of an offline request. */
@property(nonatomic, copy, nullable) NSString *taskQueueName;

/** Cloud Trace identifier for this request. */
@property(nonatomic, copy, nullable) NSString *traceId;

/** File or class that handled the request. */
@property(nonatomic, copy, nullable) NSString *urlMapEntry;

/** User agent that made the request. */
@property(nonatomic, copy, nullable) NSString *userAgent;

/** Version of the application that handled this request. */
@property(nonatomic, copy, nullable) NSString *versionId;

/**
 *  Whether this was a loading request for the instance.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *wasLoadingRequest;

@end


/**
 *  Specifies a location in a source code file.
 */
@interface GTLRLogging_SourceLocation : GTLRObject

/**
 *  Source file name. Depending on the runtime environment, this might be a
 *  simple name or a fully-qualified name.
 */
@property(nonatomic, copy, nullable) NSString *file;

/**
 *  Human-readable name of the function or method being invoked, with optional
 *  context such as the class or package name. This information is used in
 *  contexts such as the logs viewer, where a file and line number are less
 *  meaningful. The format can vary by language. For example:
 *  `qual.if.ied.Class.method` (Java), `dir/package.func` (Go), `function`
 *  (Python).
 */
@property(nonatomic, copy, nullable) NSString *functionName;

/**
 *  Line within the source file.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *line;

@end


/**
 *  A reference to a particular snapshot of the source tree used to build and
 *  deploy an application.
 */
@interface GTLRLogging_SourceReference : GTLRObject

/**
 *  Optional. A URI string identifying the repository. Example:
 *  "https://github.com/GoogleCloudPlatform/kubernetes.git"
 */
@property(nonatomic, copy, nullable) NSString *repository;

/**
 *  The canonical and persistent identifier of the deployed revision. Example
 *  (git): "0035781c50ec7aa23385dc841529ce8a4b70db1b"
 */
@property(nonatomic, copy, nullable) NSString *revisionId;

@end


/**
 *  The `Status` type defines a logical error model that is suitable for
 *  different programming environments, including REST APIs and RPC APIs. It is
 *  used by [gRPC](https://github.com/grpc). The error model is designed to be:
 *  - Simple to use and understand for most users - Flexible enough to meet
 *  unexpected needs # Overview The `Status` message contains three pieces of
 *  data: error code, error message, and error details. The error code should be
 *  an enum value of google.rpc.Code, but it may accept additional error codes
 *  if needed. The error message should be a developer-facing English message
 *  that helps developers *understand* and *resolve* the error. If a localized
 *  user-facing error message is needed, put the localized message in the error
 *  details or localize it in the client. The optional error details may contain
 *  arbitrary information about the error. There is a predefined set of error
 *  detail types in the package `google.rpc` which can be used for common error
 *  conditions. # Language mapping The `Status` message is the logical
 *  representation of the error model, but it is not necessarily the actual wire
 *  format. When the `Status` message is exposed in different client libraries
 *  and different wire protocols, it can be mapped differently. For example, it
 *  will likely be mapped to some exceptions in Java, but more likely mapped to
 *  some error codes in C. # Other uses The error model and the `Status` message
 *  can be used in a variety of environments, either with or without APIs, to
 *  provide a consistent developer experience across different environments.
 *  Example uses of this error model include: - Partial errors. If a service
 *  needs to return partial errors to the client, it may embed the `Status` in
 *  the normal response to indicate the partial errors. - Workflow errors. A
 *  typical workflow has multiple steps. Each step may have a `Status` message
 *  for error reporting purpose. - Batch operations. If a client uses batch
 *  request and batch response, the `Status` message should be used directly
 *  inside batch response, one for each error sub-response. - Asynchronous
 *  operations. If an API call embeds asynchronous operation results in its
 *  response, the status of those operations should be represented directly
 *  using the `Status` message. - Logging. If some API errors are stored in
 *  logs, the message `Status` could be used directly after any stripping needed
 *  for security/privacy reasons.
 */
@interface GTLRLogging_Status : GTLRObject

/**
 *  The status code, which should be an enum value of google.rpc.Code.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *code;

/**
 *  A list of messages that carry the error details. There will be a common set
 *  of message types for APIs to use.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRLogging_StatusDetailsItem *> *details;

/**
 *  A developer-facing error message, which should be in English. Any
 *  user-facing error message should be localized and sent in the
 *  google.rpc.Status.details field, or localized by the client.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  GTLRLogging_StatusDetailsItem
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRLogging_StatusDetailsItem : GTLRObject
@end


/**
 *  The parameters to WriteLogEntries.
 */
@interface GTLRLogging_WriteLogEntriesRequest : GTLRObject

/**
 *  Required. The log entries to write. The log entries must have values for all
 *  required fields.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRLogging_LogEntry *> *entries;

/**
 *  Optional. User-defined `key:value` items that are added to the `labels`
 *  field of each log entry in `entries`, except when a log entry specifies its
 *  own `key:value` item with the same key. Example: `{ "size": "large",
 *  "color":"red" }`
 */
@property(nonatomic, strong, nullable) GTLRLogging_WriteLogEntriesRequestLabels *labels;

/**
 *  Optional. A default log resource name for those log entries in `entries`
 *  that do not specify their own `logName`. Example:
 *  `"projects/my-project/logs/syslog"`. See LogEntry.
 */
@property(nonatomic, copy, nullable) NSString *logName;

/**
 *  Optional. Whether valid entries should be written even if some other entries
 *  fail due to INVALID_ARGUMENT or PERMISSION_DENIED errors. If any entry is
 *  not written, the response status will be the error associated with one of
 *  the failed entries and include error details in the form of
 *  WriteLogEntriesPartialErrors.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *partialSuccess;

/**
 *  Optional. A default monitored resource for those log entries in `entries`
 *  that do not specify their own `resource`.
 */
@property(nonatomic, strong, nullable) GTLRLogging_MonitoredResource *resource;

@end


/**
 *  Optional. User-defined `key:value` items that are added to the `labels`
 *  field of each log entry in `entries`, except when a log entry specifies its
 *  own `key:value` item with the same key. Example: `{ "size": "large",
 *  "color":"red" }`
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRLogging_WriteLogEntriesRequestLabels : GTLRObject
@end


/**
 *  Result returned from WriteLogEntries. empty
 */
@interface GTLRLogging_WriteLogEntriesResponse : GTLRObject
@end

NS_ASSUME_NONNULL_END
