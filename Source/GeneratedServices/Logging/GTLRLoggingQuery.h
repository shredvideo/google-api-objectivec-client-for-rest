// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Google Cloud Logging API (logging/v2beta1)
// Description:
//   Writes log entries and manages your logs, log sinks, and logs-based
//   metrics.
// Documentation:
//   https://cloud.google.com/logging/docs/

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRQuery.h"
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRLogging_ListLogEntriesRequest;
@class GTLRLogging_LogMetric;
@class GTLRLogging_LogSink;
@class GTLRLogging_WriteLogEntriesRequest;

NS_ASSUME_NONNULL_BEGIN

/**
 *  Parent class for other Logging query classes.
 */
@interface GTLRLoggingQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Lists log entries. Use this method to retrieve log entries from Cloud
 *  Logging. For ways to export log entries, see [Exporting
 *  Logs](/logging/docs/export).
 *
 *  Method: logging.entries.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeLoggingRead
 */
@interface GTLRLoggingQuery_EntriesList : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForEntriesListWithObject:]

/**
 *  Fetches a @c GTLRLogging_ListLogEntriesResponse.
 *
 *  Lists log entries. Use this method to retrieve log entries from Cloud
 *  Logging. For ways to export log entries, see [Exporting
 *  Logs](/logging/docs/export).
 *
 *  @param object The @c GTLRLogging_ListLogEntriesRequest to include in the
 *    query.
 *
 *  @returns GTLRLoggingQuery_EntriesList
 */
+ (instancetype)queryWithObject:(GTLRLogging_ListLogEntriesRequest *)object;

@end

/**
 *  Writes log entries to Cloud Logging. All log entries in Cloud Logging are
 *  written by this method.
 *
 *  Method: logging.entries.write
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingWrite
 */
@interface GTLRLoggingQuery_EntriesWrite : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForEntriesWriteWithObject:]

/**
 *  Fetches a @c GTLRLogging_WriteLogEntriesResponse.
 *
 *  Writes log entries to Cloud Logging. All log entries in Cloud Logging are
 *  written by this method.
 *
 *  @param object The @c GTLRLogging_WriteLogEntriesRequest to include in the
 *    query.
 *
 *  @returns GTLRLoggingQuery_EntriesWrite
 */
+ (instancetype)queryWithObject:(GTLRLogging_WriteLogEntriesRequest *)object;

@end

/**
 *  Lists monitored resource descriptors that are used by Cloud Logging.
 *
 *  Method: logging.monitoredResourceDescriptors.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeLoggingRead
 */
@interface GTLRLoggingQuery_MonitoredResourceDescriptorsList : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForMonitoredResourceDescriptorsList]

/**
 *  Optional. The maximum number of results to return from this request. You
 *  must check for presence of `nextPageToken` to determine if additional
 *  results are available, which you can retrieve by passing the `nextPageToken`
 *  value as the `pageToken` parameter in the next request.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. If the `pageToken` parameter is supplied, then the next page of
 *  results is retrieved. The `pageToken` parameter must be set to the value of
 *  the `nextPageToken` from the previous response.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRLogging_ListMonitoredResourceDescriptorsResponse.
 *
 *  Lists monitored resource descriptors that are used by Cloud Logging.
 *
 *  @returns GTLRLoggingQuery_MonitoredResourceDescriptorsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)query;

@end

/**
 *  Deletes a log and all its log entries. The log will reappear if it receives
 *  new entries.
 *
 *  Method: logging.projects.logs.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_ProjectsLogsDelete : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForProjectsLogsDeleteWithlogName:]

/**
 *  Required. The resource name of the log to delete. Example:
 *  `"projects/my-project/logs/syslog"`.
 */
@property(nonatomic, copy, nullable) NSString *logName;

/**
 *  Fetches a @c GTLRLogging_Empty.
 *
 *  Deletes a log and all its log entries. The log will reappear if it receives
 *  new entries.
 *
 *  @param logName Required. The resource name of the log to delete. Example:
 *    `"projects/my-project/logs/syslog"`.
 *
 *  @returns GTLRLoggingQuery_ProjectsLogsDelete
 */
+ (instancetype)queryWithLogName:(NSString *)logName;

@end

/**
 *  Creates a logs-based metric.
 *
 *  Method: logging.projects.metrics.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingWrite
 */
@interface GTLRLoggingQuery_ProjectsMetricsCreate : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForProjectsMetricsCreateWithObject:projectName:]

/**
 *  The resource name of the project in which to create the metric. Example:
 *  `"projects/my-project-id"`. The new metric must be provided in the request.
 */
@property(nonatomic, copy, nullable) NSString *projectName;

/**
 *  Fetches a @c GTLRLogging_LogMetric.
 *
 *  Creates a logs-based metric.
 *
 *  @param object The @c GTLRLogging_LogMetric to include in the query.
 *  @param projectName The resource name of the project in which to create the
 *    metric. Example: `"projects/my-project-id"`. The new metric must be
 *    provided in the request.
 *
 *  @returns GTLRLoggingQuery_ProjectsMetricsCreate
 */
+ (instancetype)queryWithObject:(GTLRLogging_LogMetric *)object
                    projectName:(NSString *)projectName;

@end

/**
 *  Deletes a logs-based metric.
 *
 *  Method: logging.projects.metrics.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingWrite
 */
@interface GTLRLoggingQuery_ProjectsMetricsDelete : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForProjectsMetricsDeleteWithmetricName:]

/**
 *  The resource name of the metric to delete. Example:
 *  `"projects/my-project-id/metrics/my-metric-id"`.
 */
@property(nonatomic, copy, nullable) NSString *metricName;

/**
 *  Fetches a @c GTLRLogging_Empty.
 *
 *  Deletes a logs-based metric.
 *
 *  @param metricName The resource name of the metric to delete. Example:
 *    `"projects/my-project-id/metrics/my-metric-id"`.
 *
 *  @returns GTLRLoggingQuery_ProjectsMetricsDelete
 */
+ (instancetype)queryWithMetricName:(NSString *)metricName;

@end

/**
 *  Gets a logs-based metric.
 *
 *  Method: logging.projects.metrics.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeLoggingRead
 */
@interface GTLRLoggingQuery_ProjectsMetricsGet : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForProjectsMetricsGetWithmetricName:]

/**
 *  The resource name of the desired metric. Example:
 *  `"projects/my-project-id/metrics/my-metric-id"`.
 */
@property(nonatomic, copy, nullable) NSString *metricName;

/**
 *  Fetches a @c GTLRLogging_LogMetric.
 *
 *  Gets a logs-based metric.
 *
 *  @param metricName The resource name of the desired metric. Example:
 *    `"projects/my-project-id/metrics/my-metric-id"`.
 *
 *  @returns GTLRLoggingQuery_ProjectsMetricsGet
 */
+ (instancetype)queryWithMetricName:(NSString *)metricName;

@end

/**
 *  Lists logs-based metrics.
 *
 *  Method: logging.projects.metrics.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeLoggingRead
 */
@interface GTLRLoggingQuery_ProjectsMetricsList : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForProjectsMetricsListWithprojectName:]

/**
 *  Optional. The maximum number of results to return from this request. You
 *  must check for presence of `nextPageToken` to determine if additional
 *  results are available, which you can retrieve by passing the `nextPageToken`
 *  value as the `pageToken` parameter in the next request.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. If the `pageToken` parameter is supplied, then the next page of
 *  results is retrieved. The `pageToken` parameter must be set to the value of
 *  the `nextPageToken` from the previous response. The value of `projectName`
 *  must be the same as in the previous request.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The resource name of the project containing the metrics. Example:
 *  `"projects/my-project-id"`.
 */
@property(nonatomic, copy, nullable) NSString *projectName;

/**
 *  Fetches a @c GTLRLogging_ListLogMetricsResponse.
 *
 *  Lists logs-based metrics.
 *
 *  @param projectName Required. The resource name of the project containing the
 *    metrics. Example: `"projects/my-project-id"`.
 *
 *  @returns GTLRLoggingQuery_ProjectsMetricsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithProjectName:(NSString *)projectName;

@end

/**
 *  Creates or updates a logs-based metric.
 *
 *  Method: logging.projects.metrics.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingWrite
 */
@interface GTLRLoggingQuery_ProjectsMetricsUpdate : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForProjectsMetricsUpdateWithObject:metricName:]

/**
 *  The resource name of the metric to update. Example:
 *  `"projects/my-project-id/metrics/my-metric-id"`. The updated metric must be
 *  provided in the request and have the same identifier that is specified in
 *  `metricName`. If the metric does not exist, it is created.
 */
@property(nonatomic, copy, nullable) NSString *metricName;

/**
 *  Fetches a @c GTLRLogging_LogMetric.
 *
 *  Creates or updates a logs-based metric.
 *
 *  @param object The @c GTLRLogging_LogMetric to include in the query.
 *  @param metricName The resource name of the metric to update. Example:
 *    `"projects/my-project-id/metrics/my-metric-id"`. The updated metric must
 *    be provided in the request and have the same identifier that is specified
 *    in `metricName`. If the metric does not exist, it is created.
 *
 *  @returns GTLRLoggingQuery_ProjectsMetricsUpdate
 */
+ (instancetype)queryWithObject:(GTLRLogging_LogMetric *)object
                     metricName:(NSString *)metricName;

@end

/**
 *  Creates a sink.
 *
 *  Method: logging.projects.sinks.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_ProjectsSinksCreate : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForProjectsSinksCreateWithObject:projectName:]

/**
 *  The resource name of the project in which to create the sink. Example:
 *  `"projects/my-project-id"`. The new sink must be provided in the request.
 */
@property(nonatomic, copy, nullable) NSString *projectName;

/**
 *  Fetches a @c GTLRLogging_LogSink.
 *
 *  Creates a sink.
 *
 *  @param object The @c GTLRLogging_LogSink to include in the query.
 *  @param projectName The resource name of the project in which to create the
 *    sink. Example: `"projects/my-project-id"`. The new sink must be provided
 *    in the request.
 *
 *  @returns GTLRLoggingQuery_ProjectsSinksCreate
 */
+ (instancetype)queryWithObject:(GTLRLogging_LogSink *)object
                    projectName:(NSString *)projectName;

@end

/**
 *  Deletes a sink.
 *
 *  Method: logging.projects.sinks.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_ProjectsSinksDelete : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForProjectsSinksDeleteWithsinkName:]

/**
 *  The resource name of the sink to delete. Example:
 *  `"projects/my-project-id/sinks/my-sink-id"`.
 */
@property(nonatomic, copy, nullable) NSString *sinkName;

/**
 *  Fetches a @c GTLRLogging_Empty.
 *
 *  Deletes a sink.
 *
 *  @param sinkName The resource name of the sink to delete. Example:
 *    `"projects/my-project-id/sinks/my-sink-id"`.
 *
 *  @returns GTLRLoggingQuery_ProjectsSinksDelete
 */
+ (instancetype)queryWithSinkName:(NSString *)sinkName;

@end

/**
 *  Gets a sink.
 *
 *  Method: logging.projects.sinks.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeLoggingRead
 */
@interface GTLRLoggingQuery_ProjectsSinksGet : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForProjectsSinksGetWithsinkName:]

/**
 *  The resource name of the sink to return. Example:
 *  `"projects/my-project-id/sinks/my-sink-id"`.
 */
@property(nonatomic, copy, nullable) NSString *sinkName;

/**
 *  Fetches a @c GTLRLogging_LogSink.
 *
 *  Gets a sink.
 *
 *  @param sinkName The resource name of the sink to return. Example:
 *    `"projects/my-project-id/sinks/my-sink-id"`.
 *
 *  @returns GTLRLoggingQuery_ProjectsSinksGet
 */
+ (instancetype)queryWithSinkName:(NSString *)sinkName;

@end

/**
 *  Lists sinks.
 *
 *  Method: logging.projects.sinks.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeLoggingRead
 */
@interface GTLRLoggingQuery_ProjectsSinksList : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForProjectsSinksListWithprojectName:]

/**
 *  Optional. The maximum number of results to return from this request. You
 *  must check for presence of `nextPageToken` to determine if additional
 *  results are available, which you can retrieve by passing the `nextPageToken`
 *  value as the `pageToken` parameter in the next request.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. If the `pageToken` parameter is supplied, then the next page of
 *  results is retrieved. The `pageToken` parameter must be set to the value of
 *  the `nextPageToken` from the previous response. The value of `projectName`
 *  must be the same as in the previous request.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The resource name of the project containing the sinks. Example:
 *  `"projects/my-logging-project"`.
 */
@property(nonatomic, copy, nullable) NSString *projectName;

/**
 *  Fetches a @c GTLRLogging_ListSinksResponse.
 *
 *  Lists sinks.
 *
 *  @param projectName Required. The resource name of the project containing the
 *    sinks. Example: `"projects/my-logging-project"`.
 *
 *  @returns GTLRLoggingQuery_ProjectsSinksList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithProjectName:(NSString *)projectName;

@end

/**
 *  Creates or updates a sink.
 *
 *  Method: logging.projects.sinks.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_ProjectsSinksUpdate : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForProjectsSinksUpdateWithObject:sinkName:]

/**
 *  The resource name of the sink to update. Example:
 *  `"projects/my-project-id/sinks/my-sink-id"`. The updated sink must be
 *  provided in the request and have the same name that is specified in
 *  `sinkName`. If the sink does not exist, it is created.
 */
@property(nonatomic, copy, nullable) NSString *sinkName;

/**
 *  Fetches a @c GTLRLogging_LogSink.
 *
 *  Creates or updates a sink.
 *
 *  @param object The @c GTLRLogging_LogSink to include in the query.
 *  @param sinkName The resource name of the sink to update. Example:
 *    `"projects/my-project-id/sinks/my-sink-id"`. The updated sink must be
 *    provided in the request and have the same name that is specified in
 *    `sinkName`. If the sink does not exist, it is created.
 *
 *  @returns GTLRLoggingQuery_ProjectsSinksUpdate
 */
+ (instancetype)queryWithObject:(GTLRLogging_LogSink *)object
                       sinkName:(NSString *)sinkName;

@end

NS_ASSUME_NONNULL_END
